   local httpService = game:GetService('HttpService')
    local ThemeManager = {} do
        ThemeManager.Folder = ''
    
        ThemeManager.Library = nil
        ThemeManager.BuiltInThemes = {
            ['Default'] 		= { 1, httpService:JSONDecode('{"FontColor":"ffffff","MainColor":"1c1c1c","AccentColor":"0055ff","BackgroundColor":"141414","OutlineColor":"323232"}') },
            ['Green'] 			= { 2, httpService:JSONDecode('{"FontColor":"ffffff","MainColor":"141414","AccentColor":"00ff8b","BackgroundColor":"1c1c1c","OutlineColor":"3c3c3c"}') },
            ['Jester'] 			= { 3, httpService:JSONDecode('{"FontColor":"ffffff","MainColor":"242424","AccentColor":"db4467","BackgroundColor":"1c1c1c","OutlineColor":"373737"}') },
            ['Mint'] 			= { 4, httpService:JSONDecode('{"FontColor":"ffffff","MainColor":"242424","AccentColor":"3db488","BackgroundColor":"1c1c1c","OutlineColor":"373737"}') },
            ['Tokyo Night'] 	= { 5, httpService:JSONDecode('{"FontColor":"ffffff","MainColor":"191925","AccentColor":"6759b3","BackgroundColor":"16161f","OutlineColor":"323232"}') },
            ['Ubuntu'] 			= { 6, httpService:JSONDecode('{"FontColor":"ffffff","MainColor":"3e3e3e","AccentColor":"e2581e","BackgroundColor":"323232","OutlineColor":"191919"}') },
            ['Dracula'] 		= { 7, httpService:JSONDecode('{"FontColor":"ffffff","MainColor":"232533","AccentColor":"6271a5","BackgroundColor":"1b1c27","OutlineColor":"7c82a7"}') },
            ['Bitch Bot'] 		= { 8, httpService:JSONDecode('{"FontColor":"ffffff","MainColor":"1e1e1e","AccentColor":"7e48a3","BackgroundColor":"232323","OutlineColor":"141414"}') },
            ['Kiriot Hub'] 		= { 9, httpService:JSONDecode('{"FontColor":"ffffff","MainColor":"30333b","AccentColor":"ffaa00","BackgroundColor":"1a1c20","OutlineColor":"141414"}') },
            ['Fatality'] 		= { 10, httpService:JSONDecode('{"FontColor":"ffffff","MainColor":"1e1842","AccentColor":"c50754","BackgroundColor":"191335","OutlineColor":"3c355d"}') },
        }
    
        function ThemeManager:ApplyTheme(theme)
            local data = self.BuiltInThemes[theme]
    
            if not data then return end
    
            -- custom themes are just regular dictionaries instead of an array with { index, dictionary }
    
            local scheme = data[2]
            for idx, col in next, scheme do
                self.Library[idx] = Color3.fromHex(col)
                
                if Options[idx] then
                    Options[idx]:SetValueRGB(Color3.fromHex(col))
                end
            end
    
            self:ThemeUpdate()
        end
    
        function ThemeManager:ThemeUpdate()
            -- This allows us to force apply themes without loading the themes tab :)
            local options = { "FontColor", "MainColor", "AccentColor", "BackgroundColor", "OutlineColor" }
            for i, field in next, options do
                if Options and Options[field] then
                    self.Library[field] = Options[field].Value
                end
            end
    
            self.Library.DarkerAccentColor = self.Library:GetDarkerColor(self.Library.AccentColor);
        end
    
        function ThemeManager:LoadDefault()		
            local theme = 'Default'
            local content = isfile(self.Folder .. '/themes/default.txt') and readfile(self.Folder .. '/themes/default.txt')
    
            if content then
                theme = content
                self:ApplyTheme(theme)
                Options.ThemeManager_ThemeList:SetValue(theme)
            end
    
        end
    
        function ThemeManager:SaveDefault(theme)
            writefile(self.Folder .. '/themes/default.txt', theme)
        end
    
        function ThemeManager:CreateThemeManager(groupbox)
            groupbox:AddLabel('Background color'):AddColorPicker('BackgroundColor', { Default = self.Library.BackgroundColor });
            groupbox:AddLabel('Main color')	:AddColorPicker('MainColor', { Default = self.Library.MainColor });
            groupbox:AddLabel('Accent color'):AddColorPicker('AccentColor', { Default = self.Library.AccentColor });
            groupbox:AddToggle('Rainbow Accent Toggle', {Text = 'Rainbow Accent Color', Default = false})
            Toggles['Rainbow Accent Toggle']:OnChanged(function(Enabled) self.Library.RainbowAccent = Enabled end)
            groupbox:AddLabel('Outline color'):AddColorPicker('OutlineColor', { Default = self.Library.OutlineColor });
            groupbox:AddLabel('Font color')	:AddColorPicker('FontColor', { Default = self.Library.FontColor });
    
            local ThemesArray = {}
            for Name, Theme in next, self.BuiltInThemes do
                table.insert(ThemesArray, Name)
            end
    
            table.sort(ThemesArray, function(a, b) return self.BuiltInThemes[a][1] < self.BuiltInThemes[b][1] end)
    
            groupbox:AddDivider()
            groupbox:AddDropdown('ThemeManager_ThemeList', { Text = 'Theme list', Values = ThemesArray, Default = 1 })
    
            groupbox:AddButton('Apply Theme', function()
                self:ApplyTheme(Options.ThemeManager_ThemeList.Value)
                self.Library:Notify(string.format('Applied theme: %q', Options.ThemeManager_ThemeList.Value))
            end)
    
            groupbox:AddButton('Set as default', function()
                self:SaveDefault(Options.ThemeManager_ThemeList.Value)
                self.Library:Notify(string.format('Set default theme to %q', Options.ThemeManager_ThemeList.Value))
            end)
            
    
            local function UpdateTheme()
                self:ThemeUpdate()
            end
    
            ThemeManager:LoadDefault()
            
            Options.BackgroundColor:OnChanged(UpdateTheme)
            Options.MainColor:OnChanged(UpdateTheme)
            Options.AccentColor:OnChanged(UpdateTheme)
            Options.OutlineColor:OnChanged(UpdateTheme)
            Options.FontColor:OnChanged(UpdateTheme)
        end
    
        function ThemeManager:SetLibrary(lib)
            self.Library = lib
        end
    
        function ThemeManager:BuildFolderTree()
            local paths = {}
    
            -- build the entire tree if a path is like some-hub/phantom-forces
            -- makefolder builds the entire tree on Synapse X but not other exploits
    
            local parts = self.Folder:split('/')
            for idx = 1, #parts do
                paths[#paths + 1] = table.concat(parts, '/', 1, idx)
            end
    
            table.insert(paths, self.Folder .. '/themes')
            table.insert(paths, self.Folder .. '/settings')
    
            for i = 1, #paths do
                local str = paths[i]
                if not isfolder(str) then
                    makefolder(str)
                end
            end
        end
    
        function ThemeManager:SetFolder(folder)
            self.Folder = folder
            self:BuildFolderTree()
        end
    
        function ThemeManager:CreateGroupBox(tab)
            assert(self.Library, 'Must set ThemeManager.Library first!')
            return tab:AddLeftGroupbox('Themes')
        end
    
        function ThemeManager:ApplyToTab(tab)
            assert(self.Library, 'Must set ThemeManager.Library first!')
            local groupbox = self:CreateGroupBox(tab)
            self:CreateThemeManager(groupbox)
        end
    
        function ThemeManager:ApplyToGroupbox(groupbox)
            assert(self.Library, 'Must set ThemeManager.Library first!')
            self:CreateThemeManager(groupbox)
        end
    
        ThemeManager:BuildFolderTree()
    end
    return ThemeManager
